--- opencv/modules/highgui/src/window_QT.cpp	2018-06-30 01:04:51.649121800 +0300
+++ opencv/modules/highgui/src/window_QT_patched.cpp	2018-06-30 16:11:11.360600400 +0300
@@ -46,6 +46,30 @@
 
 #include <window_QT.h>
 
+#include <QAbstractEventDispatcher>
+#include <QFile>
+#include <QSizePolicy>
+#include <QInputDialog>
+#include <QBoxLayout>
+#include <QSettings>
+#include <QTimer>
+#include <QtConcurrentRun>
+#include <QWaitCondition>
+#include <QKeyEvent>
+#include <QMetaObject>
+#include <QLabel>
+#include <QIODevice>
+#include <QShortcut>
+#include <QStatusBar>
+#include <QFileInfo>
+#include <QDate>
+#include <QFileDialog>
+#include <QToolBar>
+
+#include <QAction>
+#include <QButtonGroup>
+#include <QMenu>
+
 #include <math.h>
 
 #ifdef _WIN32
@@ -60,7 +84,6 @@
     #endif
 #endif
 
-
 //Static and global first
 static GuiReceiver *guiMainThread = NULL;
 static int parameterSystemC = 1;
@@ -77,15 +100,15 @@
 //end static and global
 
 // Declaration
-Qt::ConnectionType autoBlockingConnection();
+QT_NAMESPACE::ConnectionType autoBlockingConnection();
 
 // Implementation - this allows us to do blocking whilst automatically selecting the right
 // behaviour for in-thread and out-of-thread launches of cv windows. Qt strangely doesn't
 // cater for this, but does for strictly queued connections.
-Qt::ConnectionType autoBlockingConnection() {
+QT_NAMESPACE::ConnectionType autoBlockingConnection() {
   return (QThread::currentThread() != QApplication::instance()->thread())
-      ? Qt::BlockingQueuedConnection
-      : Qt::DirectConnection;
+      ? QT_NAMESPACE::BlockingQueuedConnection
+      : QT_NAMESPACE::DirectConnection;
 }
 
 CV_IMPL CvFont cvFontQt(const char* nameFont, int pointSize,CvScalar color,int weight,int style, int spacing)
@@ -522,7 +545,7 @@
         multiThreads = true;
         QMetaObject::invokeMethod(guiMainThread,
         "createWindow",
-        Qt::BlockingQueuedConnection,  // block so that we can do useful stuff once we confirm it is created
+        QT_NAMESPACE::BlockingQueuedConnection,  // block so that we can do useful stuff once we confirm it is created
         Q_ARG(QString, QString(name)),
         Q_ARG(int, flags));
      } else {
@@ -540,7 +563,7 @@
 
     QMetaObject::invokeMethod(guiMainThread,
         "destroyWindow",
-        Qt::AutoConnection,  // if another thread is controlling, let it handle it without blocking ourselves here
+        QT_NAMESPACE::AutoConnection,  // if another thread is controlling, let it handle it without blocking ourselves here
         Q_ARG(QString, QString(name)));
 }
 
@@ -551,7 +574,7 @@
         return;
     QMetaObject::invokeMethod(guiMainThread,
         "destroyAllWindow",
-        Qt::AutoConnection  // if another thread is controlling, let it handle it without blocking ourselves here
+        QT_NAMESPACE::AutoConnection  // if another thread is controlling, let it handle it without blocking ourselves here
         );
 }
 
@@ -1334,8 +1357,8 @@
     setObjectName(name_bar);
     dataSlider = value;
 
-    slider = new QSlider(Qt::Horizontal);
-    slider->setFocusPolicy(Qt::StrongFocus);
+    slider = new QSlider(QT_NAMESPACE::Horizontal);
+    slider->setFocusPolicy(QT_NAMESPACE::StrongFocus);
     slider->setMinimum(0);
     slider->setMaximum(_count);
     slider->setPageStep(5);
@@ -1367,8 +1390,8 @@
 
     //label->setStyleSheet("QPushButton:disabled {color: black}");
 
-    addWidget(label, Qt::AlignLeft);//name + value
-    addWidget(slider, Qt::AlignCenter);//slider
+    addWidget(label, QT_NAMESPACE::AlignLeft);//name + value
+    addWidget(slider, QT_NAMESPACE::AlignCenter);//slider
 }
 
 
@@ -1481,7 +1504,7 @@
         else
             QObject::connect(button, SIGNAL(toggled(bool)), button, SLOT(callCallBack(bool)));
 
-        addWidget(button, Qt::AlignCenter);
+        addWidget(button, QT_NAMESPACE::AlignCenter);
     }
 }
 
@@ -1521,7 +1544,7 @@
     userdata = arg4;
 
     setObjectName(button_name);
-    setCheckState((initial_button_state == 1 ? Qt::Checked : Qt::Unchecked));
+    setCheckState((initial_button_state == 1 ? QT_NAMESPACE::Checked : QT_NAMESPACE::Unchecked));
     setText(button_name);
 
     if (isChecked())
@@ -1567,7 +1590,7 @@
 {
     //setParent(parent);
     type = type_CvWinProperties;
-    setWindowFlags(Qt::Tool);
+    setWindowFlags(QT_NAMESPACE::Tool);
     setContentsMargins(0, 0, 0, 0);
     setWindowTitle(name_paraWindow);
     setObjectName(name_paraWindow);
@@ -1641,12 +1664,12 @@
     param_gui_mode = arg2 & 0x000000F0;
     param_ratio_mode =  arg2 & 0x00000F00;
 
-    //setAttribute(Qt::WA_DeleteOnClose); //in other case, does not release memory
+    //setAttribute(QT_NAMESPACE::WA_DeleteOnClose); //in other case, does not release memory
     setContentsMargins(0, 0, 0, 0);
     setWindowTitle(name);
     setObjectName(name);
 
-    setFocus( Qt::PopupFocusReason ); //#1695 arrow keys are not received without the explicit focus
+    setFocus( QT_NAMESPACE::PopupFocusReason ); //#1695 arrow keys are not received without the explicit focus
 
     resize(400, 300);
     setMinimumSize(1, 1);
@@ -1684,14 +1707,14 @@
 
     //Now attach everything
     if (myToolBar)
-        myGlobalLayout->addWidget(myToolBar, Qt::AlignCenter);
+        myGlobalLayout->addWidget(myToolBar, QT_NAMESPACE::AlignCenter);
 
-    myGlobalLayout->addWidget(myView->getWidget(), Qt::AlignCenter);
+    myGlobalLayout->addWidget(myView->getWidget(), QT_NAMESPACE::AlignCenter);
 
-    myGlobalLayout->addLayout(myBarLayout, Qt::AlignCenter);
+    myGlobalLayout->addLayout(myBarLayout, QT_NAMESPACE::AlignCenter);
 
     if (myStatusBar)
-        myGlobalLayout->addWidget(myStatusBar, Qt::AlignCenter);
+        myGlobalLayout->addWidget(myStatusBar, QT_NAMESPACE::AlignCenter);
 
     setLayout(myGlobalLayout);
     show();
@@ -1860,7 +1883,7 @@
 CvButtonbar* CvWindow::createButtonBar(QString name_bar)
 {
     QPointer<CvButtonbar> t = new CvButtonbar(global_control_panel, name_bar);
-    t->setAlignment(Qt::AlignHCenter);
+    t->setAlignment(QT_NAMESPACE::AlignHCenter);
 
     QPointer<QBoxLayout> myLayout = global_control_panel->myLayout;
 
@@ -1873,7 +1896,7 @@
 void CvWindow::addSlider(CvWindow* w, QString name, int* value, int count, CvTrackbarCallback on_change)
 {
     QPointer<CvTrackbar> t = new CvTrackbar(w, name, value, count, on_change);
-    t->setAlignment(Qt::AlignHCenter);
+    t->setAlignment(QT_NAMESPACE::AlignHCenter);
 
     QPointer<QBoxLayout> myLayout;
 
@@ -1897,7 +1920,7 @@
 void CvWindow::addSlider2(CvWindow* w, QString name, int* value, int count, CvTrackbarCallback2 on_change, void* userdata)
 {
     QPointer<CvTrackbar> t = new CvTrackbar(w, name, value, count, on_change, userdata);
-    t->setAlignment(Qt::AlignHCenter);
+    t->setAlignment(QT_NAMESPACE::AlignHCenter);
 
     QPointer<QBoxLayout> myLayout;
 
@@ -2101,7 +2124,7 @@
 
     //myStatusBar_msg->setFrameStyle(QFrame::Raised);
 
-    myStatusBar_msg->setAlignment(Qt::AlignHCenter);
+    myStatusBar_msg->setAlignment(QT_NAMESPACE::AlignHCenter);
     myStatusBar->addWidget(myStatusBar_msg);
 }
 
@@ -2154,7 +2177,7 @@
     //see http://doc.trolltech.com/4.6/qt.html#Key-enum
     int key = evnt->key();
 
-        Qt::Key qtkey = static_cast<Qt::Key>(key);
+        QT_NAMESPACE::Key qtkey = static_cast<QT_NAMESPACE::Key>(key);
         char asciiCode = QTest::keyToAscii(qtkey);
         if (asciiCode != 0)
             key = static_cast<int>(asciiCode);
@@ -2162,7 +2185,7 @@
             key = evnt->nativeVirtualKey(); //same codes as returned by GTK-based backend
 
     //control plus (Z, +, -, up, down, left, right) are used for zoom/panning functions
-        if (evnt->modifiers() != Qt::ControlModifier)
+        if (evnt->modifiers() != QT_NAMESPACE::ControlModifier)
         {
         mutexKey.lock();
         last_key = key;
@@ -2370,44 +2393,44 @@
 
 void OCVViewPort::icvmouseHandler(QMouseEvent* evnt, type_mouse_event category, int& cv_event, int& flags)
 {
-    Qt::KeyboardModifiers modifiers = evnt->modifiers();
-    Qt::MouseButtons buttons = evnt->buttons();
+    QT_NAMESPACE::KeyboardModifiers modifiers = evnt->modifiers();
+    QT_NAMESPACE::MouseButtons buttons = evnt->buttons();
 
     // This line gives excess flags flushing, with it you cannot predefine flags value.
     // icvmouseHandler called with flags == 0 where it really need.
     //flags = 0;
-    if(modifiers & Qt::ShiftModifier)
+    if(modifiers & QT_NAMESPACE::ShiftModifier)
         flags |= CV_EVENT_FLAG_SHIFTKEY;
-    if(modifiers & Qt::ControlModifier)
+    if(modifiers & QT_NAMESPACE::ControlModifier)
         flags |= CV_EVENT_FLAG_CTRLKEY;
-    if(modifiers & Qt::AltModifier)
+    if(modifiers & QT_NAMESPACE::AltModifier)
         flags |= CV_EVENT_FLAG_ALTKEY;
 
-    if(buttons & Qt::LeftButton)
+    if(buttons & QT_NAMESPACE::LeftButton)
         flags |= CV_EVENT_FLAG_LBUTTON;
-    if(buttons & Qt::RightButton)
+    if(buttons & QT_NAMESPACE::RightButton)
         flags |= CV_EVENT_FLAG_RBUTTON;
-    if(buttons & Qt::MidButton)
+    if(buttons & QT_NAMESPACE::MidButton)
         flags |= CV_EVENT_FLAG_MBUTTON;
 
     if (cv_event == -1) {
         if (category == mouse_wheel) {
             QWheelEvent *we = (QWheelEvent *) evnt;
-            cv_event = ((we->orientation() == Qt::Vertical) ? CV_EVENT_MOUSEWHEEL : CV_EVENT_MOUSEHWHEEL);
+            cv_event = ((we->orientation() == QT_NAMESPACE::Vertical) ? CV_EVENT_MOUSEWHEEL : CV_EVENT_MOUSEHWHEEL);
             flags |= (we->delta() & 0xffff)<<16;
             return;
         }
         switch(evnt->button())
         {
-        case Qt::LeftButton:
+        case QT_NAMESPACE::LeftButton:
             cv_event = tableMouseButtons[category][0];
             flags |= CV_EVENT_FLAG_LBUTTON;
             break;
-        case Qt::RightButton:
+        case QT_NAMESPACE::RightButton:
             cv_event = tableMouseButtons[category][1];
             flags |= CV_EVENT_FLAG_RBUTTON;
             break;
-        case Qt::MidButton:
+        case QT_NAMESPACE::MidButton:
             cv_event = tableMouseButtons[category][2];
             flags |= CV_EVENT_FLAG_MBUTTON;
             break;
@@ -2435,7 +2458,7 @@
 
     setContentsMargins(0, 0, 0, 0);
     setMinimumSize(1, 1);
-    setAlignment(Qt::AlignHCenter);
+    setAlignment(QT_NAMESPACE::AlignHCenter);
 
     setObjectName(QString::fromUtf8("graphicsView"));
 
@@ -2666,25 +2689,25 @@
         viewport()->render(&viewportPixmap);
 
         // Save it..
-        if (QString::compare(extension, "png", Qt::CaseInsensitive) == 0)
+        if (QString::compare(extension, "png", QT_NAMESPACE::CaseInsensitive) == 0)
         {
             viewportPixmap.save(fileName, "PNG");
             return;
         }
 
-        if (QString::compare(extension, "jpg", Qt::CaseInsensitive) == 0)
+        if (QString::compare(extension, "jpg", QT_NAMESPACE::CaseInsensitive) == 0)
         {
             viewportPixmap.save(fileName, "JPG");
             return;
         }
 
-        if (QString::compare(extension, "bmp", Qt::CaseInsensitive) == 0)
+        if (QString::compare(extension, "bmp", QT_NAMESPACE::CaseInsensitive) == 0)
         {
             viewportPixmap.save(fileName, "BMP");
             return;
         }
 
-        if (QString::compare(extension, "jpeg", Qt::CaseInsensitive) == 0)
+        if (QString::compare(extension, "jpeg", QT_NAMESPACE::CaseInsensitive) == 0)
         {
             viewportPixmap.save(fileName, "JPEG");
             return;
@@ -2720,7 +2743,7 @@
     if (param_keepRatio == CV_WINDOW_KEEPRATIO)//to keep the same aspect ratio
     {
         QSize newSize = QSize(image2Draw_mat->cols, image2Draw_mat->rows);
-        newSize.scale(evnt->size(), Qt::KeepAspectRatio);
+        newSize.scale(evnt->size(), QT_NAMESPACE::KeepAspectRatio);
 
         //imageWidth/imageHeight = newWidth/newHeight +/- epsilon
         //ratioX = ratioY +/- epsilon
@@ -2764,7 +2787,7 @@
 
     if (param_matrixWorld.m11()>1)
     {
-        setCursor(Qt::ClosedHandCursor);
+        setCursor(QT_NAMESPACE::ClosedHandCursor);
         positionGrabbing = evnt->pos();
     }
 
@@ -2777,7 +2800,7 @@
     icvmouseEvent(evnt, mouse_up);
 
     if (param_matrixWorld.m11()>1)
-        setCursor(Qt::OpenHandCursor);
+        setCursor(QT_NAMESPACE::OpenHandCursor);
 
     QWidget::mouseReleaseEvent(evnt);
 }
@@ -2794,7 +2817,7 @@
 {
     icvmouseEvent(evnt, mouse_move);
 
-    if (param_matrixWorld.m11() > 1 && evnt->buttons() == Qt::LeftButton)
+    if (param_matrixWorld.m11() > 1 && evnt->buttons() == QT_NAMESPACE::LeftButton)
     {
         QPoint pt = evnt->pos();
         QPointF dxy = (pt - positionGrabbing)/param_matrixWorld.m11();
@@ -2939,7 +2962,7 @@
         centralWidget->displayStatusBar(tr("Zoom: %1%").arg(param_matrixWorld.m11()*100),1000);
 
     if (param_matrixWorld.m11()>1)
-        setCursor(Qt::OpenHandCursor);
+        setCursor(QT_NAMESPACE::OpenHandCursor);
     else
         unsetCursor();
 }
@@ -3068,26 +3091,26 @@
                 //for debug
                 /*
                 val = tr("%1 %2").arg(point2.x()).arg(point2.y());
-                painter->setPen(QPen(Qt::black, 1));
+                painter->setPen(QPen(QT_NAMESPACE::black, 1));
                 painter->drawText(QRect(point1.x(),point1.y(),param_matrixWorld.m11(),param_matrixWorld.m11()/2),
-                    Qt::AlignCenter, val);
+                    QT_NAMESPACE::AlignCenter, val);
                 */
                 QString val;
 
                 val = tr("%1").arg(qRed(rgbValue));
-                painter->setPen(QPen(Qt::red, 1));
+                painter->setPen(QPen(QT_NAMESPACE::red, 1));
                 painter->drawText(QRect(pos_in_view.x(),pos_in_view.y(),pixel_width,pixel_height/3),
-                    Qt::AlignCenter, val);
+                    QT_NAMESPACE::AlignCenter, val);
 
                 val = tr("%1").arg(qGreen(rgbValue));
-                painter->setPen(QPen(Qt::green, 1));
+                painter->setPen(QPen(QT_NAMESPACE::green, 1));
                 painter->drawText(QRect(pos_in_view.x(),pos_in_view.y()+pixel_height/3,pixel_width,pixel_height/3),
-                    Qt::AlignCenter, val);
+                    QT_NAMESPACE::AlignCenter, val);
 
                 val = tr("%1").arg(qBlue(rgbValue));
-                painter->setPen(QPen(Qt::blue, 1));
+                painter->setPen(QPen(QT_NAMESPACE::blue, 1));
                 painter->drawText(QRect(pos_in_view.x(),pos_in_view.y()+2*pixel_height/3,pixel_width,pixel_height/3),
-                    Qt::AlignCenter, val);
+                    QT_NAMESPACE::AlignCenter, val);
 
             }
 
@@ -3095,12 +3118,12 @@
             {
                 QString val = tr("%1").arg(qRed(rgbValue));
                 painter->drawText(QRect(pos_in_view.x(),pos_in_view.y(),pixel_width,pixel_height),
-                    Qt::AlignCenter, val);
+                    QT_NAMESPACE::AlignCenter, val);
             }
         }
     }
 
-    painter->setPen(QPen(Qt::black, 1));
+    painter->setPen(QPen(QT_NAMESPACE::black, 1));
     painter->drawLines(linesX.data(), linesX.size());
     painter->drawLines(linesY.data(), linesY.size());
 
@@ -3112,19 +3135,19 @@
 void DefaultViewPort::drawViewOverview(QPainter *painter)
 {
     QSize viewSize = size();
-    viewSize.scale ( 100, 100,Qt::KeepAspectRatio );
+    viewSize.scale ( 100, 100,QT_NAMESPACE::KeepAspectRatio );
 
     const int margin = 5;
 
     //draw the image's location
     painter->setBrush(QColor(0, 0, 0, 127));
-    painter->setPen(Qt::darkGreen);
+    painter->setPen(QT_NAMESPACE::darkGreen);
     painter->drawRect(QRect(width()-viewSize.width()-margin, 0,viewSize.width(),viewSize.height()));
 
     //daw the view's location inside the image
     qreal ratioSize = 1/param_matrixWorld.m11();
     qreal ratioWindow = (qreal)(viewSize.height())/(qreal)(size().height());
-    painter->setPen(Qt::darkBlue);
+    painter->setPen(QT_NAMESPACE::darkBlue);
     painter->drawRect(QRectF(width()-viewSize.width()-positionCorners.left()*ratioSize*ratioWindow-margin,
         -positionCorners.top()*ratioSize*ratioWindow,
         (viewSize.width()-1)*ratioSize,
@@ -3138,17 +3161,17 @@
     int border = qMax(4, metrics.leading());
 
     QRect qrect = metrics.boundingRect(0, 0, width() - 2*border, int(height()*0.125),
-        Qt::AlignCenter | Qt::TextWordWrap, infoText);
+        QT_NAMESPACE::AlignCenter | QT_NAMESPACE::TextWordWrap, infoText);
     painter->setRenderHint(QPainter::TextAntialiasing);
     painter->fillRect(QRect(0, 0, width(), qrect.height() + 2*border),
         QColor(0, 0, 0, 127));
-    painter->setPen(Qt::white);
+    painter->setPen(QT_NAMESPACE::white);
     painter->fillRect(QRect(0, 0, width(), qrect.height() + 2*border),
         QColor(0, 0, 0, 127));
 
     painter->drawText((width() - qrect.width())/2, border,
         qrect.width(), qrect.height(),
-        Qt::AlignCenter | Qt::TextWordWrap, infoText);
+        QT_NAMESPACE::AlignCenter | QT_NAMESPACE::TextWordWrap, infoText);
 }
 
 
